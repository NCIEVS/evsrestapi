buildscript {
    ext {
		springBootVersion = '2.7.17'
        // Remove this line to see what version is favored by springBootVersion
        // and the version brought in by spring-data-elasticsearch
        set('elasticsearch.version', '7.12.1')
	}
    repositories {
        jcenter()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'war'
    id 'org.springframework.boot' version '2.7.17'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
    mavenCentral()
}

ext['log4j2.version'] = '2.17.1'

// Extra Properties
ext {
  // Parameters
  if (!project.hasProperty("inputPath")) {
    inputPath = "na"
  }
  if (!project.hasProperty("listFile")) {
    listFile = "na"
  }
  if (!project.hasProperty("terminology")) {
    terminology = "na"
  }
}

/* Version info */
group = "gov.nih.nci.evs.api"
version = "1.10.0.RELEASE"

sourceCompatibility = 17
targetCompatibility = 17

springBoot {
    // generate file META-INF/build-info.properties during the build
    buildInfo()          
}

dependencies {

	// Use version 2 with spring boot 3
	// custom location => springdoc.swagger-ui.path=/swagger-ui/index.html
    implementation("org.springdoc:springdoc-openapi-ui:1.7.0") {
       exclude group: "org.webjars", module: "swagger-ui"
    }
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-properties-migrator'
    implementation 'org.springframework:spring-aop'
    implementation 'org.springframework.data:spring-data-elasticsearch:4.2.12'

    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.aspectj:aspectjweaver:1.9.2'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'org.apache.opennlp:opennlp-tools:2.2.0'
    implementation 'org.ehcache:ehcache:3.8.1'
    implementation 'javax.cache:cache-api:1.1.1'
    implementation 'commons-io:commons-io:2.14.0'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'cglib:cglib:3.3.0'
    //implementation 'com.maxmind.geoip2:geoip2:2.15.0'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    /*
     * Test Dependencies
    */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'junit:junit:4.13.1'
    testRuntimeOnly "org.junit.platform:junit-platform-commons:1.7.0"
    testRuntimeOnly "org.junit.platform:junit-platform-runner:1.7.0"

}

test {
    // Args to pass when running the tests to ensure the cglib can be accessed and avoid InaccessibleObjectException
    jvmArgs ('-Xmx8G', '--add-opens', 'java.base/java.lang=ALL-UNNAMED')
    // Set the active profile to use our application-test.yml file from test resources
    systemProperty("spring.profiles.active", "test")
    /*
     * Configure gradle to show standard out and standard error
     * of the test JVM(s) on the console
     */
    testLogging.showStandardStreams = true
}

// # for this, the cuis with listed sources will have hierarchies computed
// ./gradlew rrfSample -Pterminology=NCIMTH,ICD10CM,ICD9CM,SNOMEDCT_US,RXNORM,LNC,MDR,RADLEX -PlistFile=src/main/resources/cuis.txt -PinputPath=../data/NCIM
tasks.register('rrfSample', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "gov.nih.nci.evs.api.service.SamplingApplication"
    systemProperties System.getProperties()
    // arguments to pass to the application
    args("rrfSample", inputPath, listFile, terminology)
    jvmArgs "-Xmx8G"
}


tasks.register('zipFile', Zip) {
    def zipFileRootDirectory = "${project.name}-${project.version}"

    from('src/main/bin') {
        fileMode = 0755
        into "$zipFileRootDirectory/bin"
    }
    from("$buildDir/main/bin") {
        fileMode = 0755
        include '**/createDirectoriesForWorkspace.pl'
        into "$zipFileRootDirectory/bin"
    }
    from('src/main/config') {
        into "${archiveBaseName}-${project.version}/config"
        into "$zipFileRootDirectory/config"
    }
    from("$buildDir/main/config") {
        include '**/createDirectories.properties'
        into "$zipFileRootDirectory/config"
    }
    from("$buildDir/libs") {
        include '*.*'
        into "$zipFileRootDirectory/lib"
    }
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

// NOTE: this causes LoaderServiceImpl to launch when run via -jar
bootJar {
    manifest {
    	attributes 'Start-Class': 'gov.nih.nci.evs.api.service.LoaderServiceImpl'
    }
    // Handle duplicate copying more than one file tot he same destination
    // https://docs.gradle.org/8.2.1/dsl/org.gradle.api.tasks.Copy.html#org.gradle.api.tasks.Copy:duplicatesStrategy
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

zipFile.dependsOn = [ bootWar, bootJar ]
build.dependsOn = [ test, bootWar, bootJar, zipFile ]
publishToMavenLocal.dependsOn = [ bootWar, bootJar, zipFile ]

