# constructClassCountsQuery(String namedGraph)
class.counts=SELECT ( count(?class) as ?count ) { \n\
    GRAPH <#{namedGraph}> { \n\
        ?class a owl:Class \n\
  }\n\
}

# constructAllGraphNamesQuery()
all.graph.names=select distinct ?graphName where { graph ?graphName {?s ?p ?o} }

# constructVersionInfoQuery(String namedGraph)
version.info=SELECT ?version ?date ?comment { GRAPH <#{namedGraph}> {\n\
    ?o a owl:Ontology .\n\
    ?o owl:versionInfo ?version .\n\
    ?o dc:date ?date .\n\
    ?o rdfs:comment ?comment\n\
  }\n\
}

# constructAxiomQualifierQuery(String propertyCode, String namedGraph)
axiom.qualifier=SELECT DISTINCT ?propertyValue\n\
{ GRAPH <#{namedGraph}>\n\
  { ?axiom a owl:Axiom .\n\
    ?axiom :#{propertyCode}?propertyValue\n\
  }\n\
}\n\
ORDER BY ?propertyValue

# constructPropertyQuery(String conceptCode, String namedGraph)
property=SELECT ?property ?propertyCode  ?propertyLabel ?propertyValue\n\
{ GRAPH <#{namedGraph}>\n\
  { ?concept a owl:Class .\n\
    ?concept :NHC0 "#{conceptCode}" .\n\
    ?concept ?property ?propertyValue .\n\
    ?property a owl:AnnotationProperty .\n\
    ?property rdfs:label ?propertyLabel .\n\
    OPTIONAL { ?property :NHC0 ?propertyCode }\n\
  }\n\
}

# constructPropertyNoRestrictionsQuery(String conceptCode, String namedGraph)
property.no.restrictions=SELECT ?property ?propertyCode  ?propertyLabel ?propertyValue\n\
{ GRAPH <#{namedGraph}>\n\
  { ?concept :NHC0 "#{conceptCode}" .\n\
    ?concept ?property ?propertyValue .\n\
    OPTIONAL { ?property rdfs:label ?propertyLabel }.\n\
    OPTIONAL { ?property :NHC0 ?propertyCode }\n\
  }\n\
}

# constructAllPropertyQuery(String conceptCode, String namedGraph)
all.property=SELECT ?property ?propertyCode  ?propertyLabel ?propertyValue\n\
{ GRAPH <#{namedGraph}>\n\
  { ?concept :NHC0 "#{conceptCode}" .\n\
    ?concept ?property ?propertyValue .\n\
    OPTIONAL { ?property rdfs:label ?propertyLabel }.\n\
    OPTIONAL { ?property :NHC0 ?propertyCode }\n\
  }\n\
}

# constructConceptLabelQuery(String conceptCode, String namedGraph)
concept.label=SELECT ?conceptLabel\n\
{ GRAPH <#{namedGraph}>\n\
  {\n\
    ?concept :NHC0 "#{conceptCode}" .\n\
    ?concept rdfs:label ?conceptLabel \n\
  }\n\
}

# constructAxiomQuery(String conceptCode, String namedGraph)
axiom=SELECT ?axiom ?axiomProperty  ?axiomValue\n\
{ GRAPH <#{namedGraph}>\n\
    {\n\
      ?axiom a owl:Axiom .\n\
      ?axiom owl:annotatedSource :#{conceptCode} .\n\
      ?axiom ?axiomProperty ?axiomValue\n\
    }\n\
}\n\
ORDER BY ?axiom

# constructSubconceptQuery(String conceptCode, String namedGraph)
subconcept=SELECT ?subclass ?subclassLabel ?subclassCode\n\
{ GRAPH <#{namedGraph}>\n\
        {\n\
          {\n\
            {\n\
              ?superclass a owl:Class .\n\
              ?superclass :NHC0 "#{conceptCode}" .\n\
              ?subclass rdfs:subClassOf ?superclass .\n\
              ?subclass a owl:Class .\n\
              ?subclass rdfs:label ?subclassLabel .\n\
              ?subclass :NHC0 ?subclassCode\n\
            }\n\
            FILTER (?superclass != ?subclass)\n\
          }\n\
          UNION\n\
          {\n\
            {\n\
              ?superclass a owl:Class .\n\
              ?superclass :NHC0 "#{conceptCode}" .\n\
              ?equiv_concept owl:intersectionOf ?list .\n\
              ?list rdf:rest*/rdf:first ?superclass .\n\
              ?subclass owl:equivalentClass ?equiv_concept .\n\
              ?subclass a owl:Class .\n\
              ?subclass rdfs:label ?subclassLabel .\n\
              ?subclass :NHC0 ?subclassCode\n\
            }\n\
            FILTER (?superclass != ?subclass)\n\
          }\n\
        }\n\
}\n\
ORDER by ?subclassLabel

# constructSuperconceptQuery(String conceptCode, String namedGraph)
superconcept=SELECT ?superclass ?superclassLabel ?superclassCode\n\
{ GRAPH <#{namedGraph}>\n\
        {\n\
          {\n\
            {\n\
              ?subclass a owl:Class .\n\
              ?subclass :NHC0 "#{conceptCode}" .\n\
              ?subclass rdfs:subClassOf ?superclass .\n\
              ?superclass a owl:Class .\n\
              ?superclass rdfs:label ?superclassLabel .\n\
              ?superclass :NHC0 ?superclassCode\n\
            }\n\
            FILTER (?subclass != ?superclass)\n\
          }\n\
          UNION\n\
          {\n\
            {\n\
              ?subclass a owl:Class .\n\
              ?subclass :NHC0 "#{conceptCode}" .\n\
              ?equiv_concept owl:intersectionOf ?list .\n\
              ?list rdf:rest*/rdf:first ?superclass .\n\
              ?subclass owl:equivalentClass ?equiv_concept .\n\
              ?superclass a owl:Class .\n\
              ?superclass rdfs:label ?superclassLabel .\n\
              ?superclass :NHC0 ?superclassCode\n\
            }\n\
            FILTER (?subclass != ?superclass)\n\
          }\n\
        }\n\
}\n\
ORDER by ?superclassLabel

# constructAssociationsQuery(String conceptCode, String namedGraph)
associations=SELECT ?relationshipCode ?relationship ?relatedConceptCode ?relatedConceptLabel\n\
{\n\
    GRAPH <#{namedGraph}>\n\
    {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> .\n\
        ?y a owl:AnnotationProperty .\n\
        ?x ?y ?z .\n\
        ?z a owl:Class .\n\
        ?z rdfs:label ?relatedConceptLabel .\n\
        ?z :NHC0 ?relatedConceptCode .\n\
        ?y rdfs:label ?relationship .\n\
        ?y :NHC0 ?relationshipCode .\n\
        ?y rdfs:range ?y_range\n\
    }\n\
    FILTER (str(?y_range)=\"http://www.w3.org/2001/XMLSchema#anyURI\")\n\
}\n\
ORDER BY ?relationship ?relatedConceptLabel

# constructInverseAssociationsQuery(String conceptCode, String namedGraph)
inverse.associations=SELECT ?relationshipCode ?relatedConceptLabel ?relatedConceptCode ?relationship\n\
{\n\
    GRAPH <#{namedGraph}>\n\
    {\n\
        ?z a owl:Class .\n\
        ?z rdfs:label ?z_label .\n\
        ?z :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> .\n\
        ?x a owl:Class .\n\
        ?x rdfs:label ?relatedConceptLabel .\n\
        ?x :NHC0 ?relatedConceptCode .\n\
        ?y a owl:AnnotationProperty .\n\
        ?x ?y ?z .\n\
        ?y rdfs:label ?relationship .\n\
        ?y :NHC0 ?relationshipCode .\n\
        ?y rdfs:range ?y_range\n\
    }\n\
    FILTER (str(?y_range)=\"http://www.w3.org/2001/XMLSchema#anyURI\")\n\
}\n\
ORDER BY ?relationship ?relatedConceptLabel

# constructInverseRolesQuery(String conceptCode, String namedGraph)
inverse.roles=SELECT distinct ?relatedConceptLabel ?relatedConceptCode ?relationship ?relationshipCode\n\
{\n\
    GRAPH <#{namedGraph}>\n\
    {\n\
      {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 ?relatedConceptCode .\n\
        ?x rdfs:label ?relatedConceptLabel .\n\
        ?x rdfs:subClassOf ?z0 .\n\
        ?z0 a owl:Class .\n\
        ?z0 owl:intersectionOf ?list .\n\
        ?list rdf:rest*/rdf:first ?z2 .\n\
        ?z2 a owl:Restriction .\n\
        ?z2 owl:onProperty ?p .\n\
        ?p rdfs:label ?relationship .\n\
        ?p :NHC0 ?relationshipCode .\n\
        ?z2 owl:someValuesFrom ?y .\n\
        ?y :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> .\n\
        ?y rdfs:label ?y_label\n\
      }\n\
      UNION\n\
      {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 ?relatedConceptCode .\n\
        ?x rdfs:label ?relatedConceptLabel .\n\
        ?x rdfs:subClassOf ?r .\n\
        ?r a owl:Restriction .\n\
        ?r owl:onProperty ?p .\n\
        ?p rdfs:label ?relationship .\n\
        ?p :NHC0 ?relationshipCode .\n\
        ?r owl:someValuesFrom ?y .\n\
        ?y a owl:Class .\n\
        ?y :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> \n\
      }\n\
      UNION\n\
      {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 ?relatedConceptCode .\n\
        ?x rdfs:label ?relatedConceptLabel .\n\
        ?x owl:equivalentClass ?z .\n\
        ?z a owl:Class .\n\
        ?z owl:intersectionOf ?list .\n\
        ?list rdf:rest*/rdf:first ?z2 .\n\
        ?z2 a owl:Restriction .\n\
        ?z2 owl:onProperty ?p .\n\
        ?p rdfs:label ?relationship .\n\
        ?p :NHC0 ?relationshipCode .\n\
        ?z2 owl:someValuesFrom ?y .\n\
        ?y a owl:Class .\n\
        ?y :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> \n\
      }\n\
      UNION\n\
      {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 ?relatedConceptCode .\n\
        ?x rdfs:label ?relatedConceptLabel .\n\
        ?x owl:equivalentClass ?z1 .\n\
        ?z1 a owl:Class .\n\
        ?z1 owl:intersectionOf ?list1 .\n\
        ?list1 rdf:rest*/rdf:first ?z2 .\n\
        ?z2 owl:unionOf ?list2 .\n\
        ?list2 rdf:rest*/rdf:first ?z3 .\n\
        ?z3 owl:intersectionOf ?list3 .\n\
        ?list3 rdf:rest*/rdf:first ?z4 .\n\
        ?z4 a owl:Restriction .\n\
        ?z4 owl:onProperty ?p .\n\
        ?p rdfs:label ?relationship .\n\
        ?p :NHC0 ?relationshipCode .\n\
        ?z4 owl:someValuesFrom ?y .\n\
        ?y a owl:Class .\n\
        ?y :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> \n\
      }\n\
   }\n\
} \n\
ORDER BY ?relationship ?relatedConceptLabel

# constructRolesQuery(String conceptCode, String namedGraph)
roles=SELECT distinct ?relationship ?relationshipCode ?relatedConceptLabel ?relatedConceptCode \n\
{\n\
    graph <#{namedGraph}>\n\
    {\n\
      {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> .\n\
        ?x rdfs:label ?x_label .\n\
        ?x rdfs:subClassOf ?z0 .\n\
        ?z0 a owl:Class .\n\
        ?z0 owl:intersectionOf ?list .\n\
        ?list rdf:rest*/rdf:first ?z2 .\n\
        ?z2 a owl:Restriction .\n\
        ?z2 owl:onProperty ?p .\n\
        ?p rdfs:label ?relationship .\n\
        ?p :NHC0 ?relationshipCode .\n\
        ?z2 owl:someValuesFrom ?y .\n\
        ?y :NHC0 ?relatedConceptCode .\n\
        ?y rdfs:label ?relatedConceptLabel\n\
      }\n\
      UNION\n\
      {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> .\n\
        ?x rdfs:subClassOf ?r .\n\
        ?r a owl:Restriction .\n\
        ?r owl:onProperty ?p .\n\
        ?p rdfs:label ?relationship .\n\
        ?p :NHC0 ?relationshipCode .\n\
        ?r owl:someValuesFrom ?y .\n\
        ?y a owl:Class .\n\
        ?y rdfs:label ?relatedConceptLabel .\n\
        ?y :NHC0 ?relatedConceptCode\n\
      }\n\
      UNION\n\
      {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> .\n\
        ?x owl:equivalentClass ?z .\n\
        ?z a owl:Class .\n\
        ?z owl:intersectionOf ?list .\n\
        ?list rdf:rest*/rdf:first ?z2 .\n\
        ?z2 a owl:Restriction .\n\
        ?z2 owl:onProperty ?p .\n\
        ?p rdfs:label ?relationship .\n\
        ?p :NHC0 ?relationshipCode .\n\
        ?z2 owl:someValuesFrom ?y .\n\
        ?y :NHC0 ?relatedConceptCode .\n\
        ?y rdfs:label ?relatedConceptLabel\n\
      }\n\
      UNION\n\
      {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 "#{conceptCode}"^^<http://www.w3.org/2001/XMLSchema#string> .\n\
        ?x owl:equivalentClass ?z1 .\n\
        ?z1 a owl:Class .\n\
        ?z1 owl:intersectionOf ?list1 .\n\
        ?list1 rdf:rest*/rdf:first ?z2 .\n\
        ?z2 owl:unionOf ?list2 .\n\
        ?list2 rdf:rest*/rdf:first ?z3 .\n\
        ?z3 owl:intersectionOf ?list3 .\n\
        ?list3 rdf:rest*/rdf:first ?z4 .\n\
        ?z4 a owl:Restriction .\n\
        ?z4 owl:onProperty ?p .\n\
        ?p rdfs:label ?relationship .\n\
        ?p :NHC0 ?relationshipCode .\n\
        ?z4 owl:someValuesFrom ?y .\n\
        ?y :NHC0 ?relatedConceptCode .\n\
        ?y rdfs:label ?relatedConceptLabel\n\
      }\n\
   }\n\
}\n\
ORDER BY ?relationship ?relatedConceptLabel

# constructDisjointWithQuery(String conceptCode, String namedGraph)
disjoint.with=SELECT ?relatedConceptLabel ?relatedConceptCode ?relationship\n\
{\n\
    GRAPH <#{namedGraph}>\n\
    {\n\
        ?x a owl:Class .\n\
        ?x :NHC0 "#{conceptCode}" .\n\
        ?x owl:disjointWith ?concept .\n\
        ?concept :NHC0 ?relatedConceptCode .\n\
        ?concept rdfs:label ?relatedConceptLabel\n\
        BIND (\"disjointWith\" as ?relationship)\n\
    }\n\
}\n\
ORDER BY ?relatedConceptLabel

# constructHierarchyQuery(String namedGraph)
hierarchy=SELECT ?parentCode ?parentLabel ?childCode ?childLabel\n\
    {\n\
    GRAPH <#{namedGraph}>\n\
      {\n\
        {\n\
          {\n\
            ?child a owl:Class .\n\
            ?child rdfs:label ?childLabel .\n\
            ?child :NHC0 ?childCode .\n\
            ?child rdfs:subClassOf ?parent .\n\
            ?parent a owl:Class .\n\
            ?parent rdfs:label ?parentLabel .\n\
            ?parent :NHC0 ?parentCode\n\
          }\n\
          FILTER (?child != ?parent)\n\
        }\n\
        UNION\n\
        {\n\
          {\n\
            ?child a owl:Class .\n\
            ?child rdfs:label ?childLabel .\n\
            ?child :NHC0 ?childCode .\n\
            ?child owl:equivalentClass ?y .\n\
            ?y a owl:Class .\n\
            ?y owl:intersectionOf ?list .\n\
            ?list rdf:rest*/rdf:first ?parent .\n\
            ?parent a owl:Class .\n\
            ?parent rdfs:label ?parentLabel .\n\
            ?parent :NHC0 ?parentCode\n\
          }\n\
          FILTER (?child != ?parent)\n\
        }\n\
      }\n\
    }

# constructAllPropertiesQuery(String namedGraph)
all.properties=SELECT ?property ?propertyCode  ?propertyLabel ?propertyValue\n\
{ GRAPH <#{namedGraph}>\n\
  { ?property a owl:AnnotationProperty .\n\
    ?property rdfs:label ?propertyLabel .\n\
    ?property :NHC0 ?propertyCode .\n\
    ?property :P108 ?propertyValue .\n\
    filter not exists { ?property rdfs:range xml:anyURI }\n\
  }\n\
}\n\
ORDER BY ?propertyLabel

# constructAllAssociationsQuery(String namedGraph)
all.associations=SELECT ?property ?propertyCode  ?propertyLabel ?propertyValue\n\
{ GRAPH <#{namedGraph}>\n\
  { ?property a owl:AnnotationProperty .\n\
    ?property rdfs:label ?propertyLabel .\n\
    ?property :NHC0 ?propertyCode .\n\
    ?property :P108 ?propertyValue .\n\
    ?property rdfs:range xml:anyURI \n\
  }\n\
}\n\
ORDER BY ?propertyLabel

# constructAllRolesQuery(String namedGraph)
all.roles=SELECT ?property ?propertyCode  ?propertyLabel ?propertyValue\n\
{ GRAPH <#{namedGraph}>\n\
  { ?property a owl:ObjectProperty .\n\
    ?property rdfs:label ?propertyLabel .\n\
    ?property :NHC0 ?propertyCode .\n\
    ?property :P108 ?propertyValue \n\
  }\n\
}\n\
ORDER BY ?propertyLabel

# constructUniqueSourcesQuery(String namedGraph)
unique.sources=SELECT DISTINCT ?propertyValue\n\
{ GRAPH <#{namedGraph}>\n\
  { ?axiom a owl:Axiom .\n\
    { ?axiom :P384 ?propertyValue }\n\
    UNION\n\
    { ?axiom :P386 ?propertyValue }\n\
  }\n\
}\n\
ORDER BY ?propertyValue