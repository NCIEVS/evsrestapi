#!/bin/bash

### BEGIN INIT INFO
# Provides: evsrestapi
# Required-Start: $local_fs $syslog
# Required-Stop: $local_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop the Angular Core application
### END INIT INFO

export JAVA_HOME=/usr/local/corretto-jdk11
export PATH="${JAVA_HOME}/bin:${PATH}"
USER=`id | sed -e 's/^[^(]*(\([^(]*\)).*$/\1/'`
APP_NAME=`basename $0`
APP_USER=evsuser
APP_HOME=/local/content
if
  [ "$USER" != "" ]
then
  APP_USER="$USER"
else
  if
    [ "$user" != "" ]
  then
    APP_USER="$user"
  fi
fi

CONFIG_DIR=${APP_HOME}/${APP_NAME}/config
CONFIG_ENV_FILE=${CONFIG_DIR}/setenv.sh

APP_DIR=${APP_HOME}/${APP_NAME}/${APP_NAME}
APP_ENV_FILE=${APP_DIR}/bin/setenv.sh

JAR_FILE=${APP_DIR}/lib/${APP_NAME}.war
LOG_DIR=${APP_DIR}/logs
LOG_FILE=${LOG_DIR}/${APP_NAME}.log
JAVA_OPTIONS="-Xmx4096m"
JAVA_COMMAND="java ${JAVA_OPTIONS} -jar ${JAR_FILE}"
SHUTDOWN_WAIT=45

#
# Set up the environment for this application if necessary
#
if
    [ -f ${CONFIG_ENV_FILE} ]
then
    JAVA_COMMAND=". ${CONFIG_ENV_FILE} ; ${JAVA_COMMAND}"
else
    if
        [ -f ${APP_ENV_FILE} ]
    then
        JAVA_COMMAND=". ${APP_ENV_FILE} ; ${JAVA_COMMAND}"
    fi
fi

pid() {
    echo `ps aux --user $APP_USER | fgrep java | fgrep -v fgrep | fgrep $APP_NAME | awk '{ print $2 }'`
}

start() {
    pid=$(pid)
    if
        [ -n "$pid" ]
    then
        echo "Application $APP_NAME is already running (pid: $pid)."
    else
        #
        # Create the log directory if necessary
        #
        if
            [ ! -d $LOG_DIR ]
        then
            mkdir -p $LOG_DIR
            if
                [ "$USER" = "root" ]
            then
                chown ${APP_USER}:${APP_USER} $LOG_DIR
            fi
        fi

        #
        # Start the application
        #
        echo "Starting $APP_NAME"
        if
          [ "$UID" = "0" ]
        then
            /bin/su -c "$JAVA_COMMAND" $APP_USER - 2>>$LOG_FILE >>$LOG_FILE &
            until
                [ "`ls -l $LOG_FILE 2> /dev/null`" != "" ]
            do
                sleep 1
            done
            chown ${APP_USER}:${APP_USER} $LOG_FILE
        else
            eval "$JAVA_COMMAND" 2>>$LOG_FILE >>$LOG_FILE &
        fi
    fi
    return 0
}

stop() {
    pid=$(pid)
    if
        [ -n "$pid" ]
    then
        echo "Stopping $APP_NAME"
        kill $pid

        let kwait=$SHUTDOWN_WAIT
        count=0
        count_by=5
        until
            [ `ps -p $pid | grep -c $pid` = '0' ] || [ $count -gt $kwait ]
        do
            echo "Waiting for process to exit.  Timeout before killing the pid: ${count}/${kwait}."
            sleep $count_by
            let count=$count+$count_by;
        done
    
        if
            [ $count -gt $kwait ]
        then
            echo "Killing process which didn't stop after $SHUTDOWN_WAIT seconds."
            kill -9 $pid
        fi
    else
        echo "Application $APP_NAME is not running."
    fi

    return 0
}

case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
       pid=$(pid)
        if
            [ -n "$pid" ]
        then
            command="ps -ef | awk '{ if (\$2 == $pid) print }'"
            echo ""
            eval "$command"
            echo ""
        else
           echo "Application $APP_NAME is not running."
        fi
        ;;
    *)
        echo ""
        echo "usage: `basename $0` start | stop | restart | status"
        echo ""
        exit 1
        ;;
esac

exit 0
